'''
Предположим такую невозможную ситуацию: у вас есть модуль на python, который не работает.
При попытке его импорта интерпретатор ругается на какое-то количество синтаксических ошибок и непонятных исключений.
Но выход есть!
Напишите функцию force_load, которая будет импортировать этот злосчастный модуль и выкидывать из него все строчки с ошибками.

Пусть на вход она принимает имя модуля, который лежит в той же директории, а возвращает словарь со всеми объектами, которые удалось без ошибок создать на этапе импорта.
Например, есть модуль broken.py:
def foo(): 
    return 1 
 
refrigerator 
 
 
raise TypeError(’I can\’t type!’) 
 
def bar(): 
    return 2
Предположим, у нас уже есть функция force_load - попробуем ее использовать:
>>>> m = force_load(’broken’) 
>>>> m 
{ ’bar’: <function main.bar>, 
 ’foo’: <function main.foo>} 
>>>> m[’bar’]() 
2 
>>>> m[’foo’]() 
1
Пример
Ввод	Вывод
Примечания
При выполнении задачи вам могут помочь функции exec, eval, compile (не обязательно все) и модули sys и traceback.
Пример как положить объекты из выполненного блока кода в словарик ldict:
ldict = {} 
exec(’’.join(lines), globals(), ldict)
Обратите внимание, что есть очень особенные исключения SyntaxError. Если программа часть исключений обрабатывает, а часть нет – дело скорее всего именно в них.
https://docs.python.org/3/library/exceptions.html#SyntaxError Если совсем непонятно, стоит посмотреть у объекта перехваченного исключения атрибут args, там вся необходимая наводящая информация.

'''
