'''
Хакер Лёша нашёл уязвимость в известном сервисе. Он хочет построить вредоносную систему, почти не отличимую от старой, а потому хочет воспользоваться Самым Важным Классом взломанной системы. Беда в том, что доступа к коду класса нет, его можно только импортировать. Хакеры пишут на ассемблере и теряются, когда речь идет о высокоуровневых языках, поэтому вам придётся помочь Лёше.

Часть коварного плана, которую вам предстоит реализовать, состоит в том, чтобы взять Очень Важный Класс и сконструировать на его основе новый. Остальное мы сделаем за вас.

Вредоносные изменения, которые вам предстоит внести по сравнению с оригинальным классом:

Обернуть все методы в декоратор (он вам тоже неизвестен, но уже написан и ждёт своего часа)
При попытке получить атрибут класса, значение которого является числом, возвращаемое значение нужно умножить на два
Если значение атрибута – это контейнер, нужно вернуть контейнер такого же типа, но пустой (для простоты можно считать, что все типы-контейнеры инициализируются одинаково, например, пустой список можно создать с помощью list()). С определением того, что такое контейнер, вам поможет документация модуля collections.abc
Кстати, Лёша – вежливый хакер, поэтому он не изменяет никакие атрибуты/методы/etc класса, не входящие в публичный интерфейс (начинающиеся с символа '_')

Ваше решение не должно ничего выводить на экран, ваша задача – только определить HackedClass. Оно может начинаться примерно так:

from app import VeryImportantClass, decorator

class HackedClass(VeryImportantClass):

    ...


'''

from app import VeryImportantClass, decorator


import types


class HackedClass(VeryImportantClass):

    def __getattribute__(self, name):
        attr = super(HackedClass, self).__getattribute__(name)
        if name[0] == '_':
            return attr

        if type(attr) == types.MethodType:
            @decorator
            def hackedMethod(*args, **kwargs):
                return attr(*args, **kwargs)

            return hackedMethod

        if isinstance(attr, int) or isinstance(attr, float):
            return 2*attr

        if hasattr(attr, '__contains__'):
            return type(attr)()
